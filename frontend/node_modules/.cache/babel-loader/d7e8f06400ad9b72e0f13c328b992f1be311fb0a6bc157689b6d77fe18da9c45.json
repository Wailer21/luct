{"ast":null,"code":"import axios from \"axios\";\n\n// Base API URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://luct-7.onrender.com\";\nexport const API_ENDPOINTS = {\n  // Auth\n  REGISTER: `${API_BASE_URL}/api/auth/register`,\n  LOGIN: `${API_BASE_URL}/api/auth/login`,\n  ME: `${API_BASE_URL}/api/auth/me`,\n  // Data\n  FACULTIES: `${API_BASE_URL}/api/faculties`,\n  COURSES: `${API_BASE_URL}/api/courses`,\n  CLASSES: `${API_BASE_URL}/api/classes`,\n  MY_CLASSES: `${API_BASE_URL}/api/my-classes`,\n  // Reports\n  REPORTS: `${API_BASE_URL}/api/reports`,\n  REPORTS_STATS: `${API_BASE_URL}/api/reports/stats`,\n  REPORTS_BY_ID: id => `${API_BASE_URL}/api/reports/${id}`,\n  REPORTS_FEEDBACK: id => `${API_BASE_URL}/api/reports/${id}/feedback`,\n  // Health\n  HEALTH: `${API_BASE_URL}/api/health`,\n  TEST: `${API_BASE_URL}/api/test`\n};\n\n// Get token from localStorage\nexport const getAuthToken = () => {\n  return localStorage.getItem(\"token\");\n};\n\n// Enhanced API instance with better timeout and retry configuration\nconst apiInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  // Reduced from 15000 to 10000ms\n  timeoutErrorMessage: \"Request timeout - backend server is not responding\"\n});\n\n// Request interceptor to add auth token\napiInstance.interceptors.request.use(config => {\n  var _config$method;\n  const token = getAuthToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  config.headers[\"Content-Type\"] = \"application/json\";\n\n  // Add timestamp for debugging\n  config.metadata = {\n    startTime: new Date()\n  };\n  console.log(`🚀 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, {\n    params: config.params,\n    timestamp: config.metadata.startTime.toISOString()\n  });\n  return config;\n}, error => {\n  console.error(\"❌ Request interceptor error:\", error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiInstance.interceptors.response.use(response => {\n  var _response$config$meth;\n  const endTime = new Date();\n  const duration = endTime - response.config.metadata.startTime;\n  console.log(`✅ API Response: ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, {\n    status: response.status,\n    duration: `${duration}ms`,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$config$method, _error$config2, _error$response, _error$response2, _error$response3;\n  const endTime = new Date();\n  const duration = error.config ? endTime - error.config.metadata.startTime : 'N/A';\n  console.error(`💥 API Error: ${(_error$config = error.config) === null || _error$config === void 0 ? void 0 : (_error$config$method = _error$config.method) === null || _error$config$method === void 0 ? void 0 : _error$config$method.toUpperCase()} ${(_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url}`, {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    duration: `${duration}ms`,\n    error: error.message,\n    code: error.code,\n    response: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.warn(\"🔐 Authentication failed - redirecting to login\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    // Use setTimeout to avoid React state updates during render\n    setTimeout(() => {\n      window.location.href = \"/login\";\n    }, 100);\n  }\n  return Promise.reject(error);\n});\n\n// Enhanced API call wrapper with better error handling and retry logic\nexport const apiCall = async (endpoint, options = {}, retries = 3) => {\n  const maxRetries = retries;\n  try {\n    var _config$method2;\n    const config = {\n      url: endpoint,\n      ...options\n    };\n    console.log(`🔄 API Call attempt: ${((_config$method2 = config.method) === null || _config$method2 === void 0 ? void 0 : _config$method2.toUpperCase()) || 'GET'} ${endpoint} (${maxRetries - retries + 1}/${maxRetries + 1})`);\n    const response = await apiInstance(config);\n\n    // Handle backend response format\n    if (response.data && response.data.success === false) {\n      const error = new Error(response.data.message || \"Request failed\");\n      error.response = response;\n      throw error;\n    }\n    return response.data;\n  } catch (error) {\n    var _options$method, _error$response4, _error$response5, _error$response6, _error$response6$data, _error$response7, _error$response8;\n    const isTimeout = error.code === 'ECONNABORTED' || error.message.includes('timeout');\n    const isNetworkError = error.message.includes('Network Error') || !error.response;\n    console.error(`❌ API Call failed: ${((_options$method = options.method) === null || _options$method === void 0 ? void 0 : _options$method.toUpperCase()) || 'GET'} ${endpoint}`, {\n      error: error.message,\n      code: error.code,\n      status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n      isTimeout,\n      isNetworkError,\n      retriesLeft: retries\n    });\n\n    // Retry logic for timeout and network errors\n    if ((isTimeout || isNetworkError) && retries > 0) {\n      const delay = Math.pow(2, maxRetries - retries) * 1000; // Exponential backoff\n      console.log(`⏳ Retrying in ${delay}ms... (${retries} retries left)`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n      return apiCall(endpoint, options, retries - 1);\n    }\n\n    // Enhanced error handling\n    if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n      // Already handled in interceptor\n    }\n\n    // Return a consistent error format\n    const errorMessage = isTimeout ? \"Backend server is not responding. Please check if the server is running.\" : isNetworkError ? \"Network connection failed. Please check your internet connection.\" : ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message || \"API request failed\";\n    throw {\n      success: false,\n      message: errorMessage,\n      status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status,\n      code: error.code,\n      data: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data,\n      isTimeout,\n      isNetworkError\n    };\n  }\n};\n\n// Enhanced API methods with proper response handling\nexport const api = {\n  get: async (endpoint, params = {}) => {\n    try {\n      const response = await apiCall(endpoint, {\n        method: \"GET\",\n        params\n      });\n      return {\n        success: true,\n        data: response.data || response,\n        message: response.message || \"Request successful\",\n        status: 200\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n        error: error.data,\n        status: error.status,\n        code: error.code,\n        isTimeout: error.isTimeout,\n        isNetworkError: error.isNetworkError,\n        data: null\n      };\n    }\n  },\n  post: async (endpoint, data = {}) => {\n    try {\n      const response = await apiCall(endpoint, {\n        method: \"POST\",\n        data\n      });\n      return {\n        success: true,\n        data: response.data || response,\n        message: response.message || \"Created successfully\",\n        status: 201\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n        error: error.data,\n        status: error.status,\n        code: error.code,\n        isTimeout: error.isTimeout,\n        isNetworkError: error.isNetworkError,\n        data: null\n      };\n    }\n  },\n  put: async (endpoint, data = {}) => {\n    try {\n      const response = await apiCall(endpoint, {\n        method: \"PUT\",\n        data\n      });\n      return {\n        success: true,\n        data: response.data || response,\n        message: response.message || \"Updated successfully\",\n        status: 200\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n        error: error.data,\n        status: error.status,\n        code: error.code,\n        isTimeout: error.isTimeout,\n        isNetworkError: error.isNetworkError,\n        data: null\n      };\n    }\n  },\n  delete: async endpoint => {\n    try {\n      const response = await apiCall(endpoint, {\n        method: \"DELETE\"\n      });\n      return {\n        success: true,\n        data: response.data || response,\n        message: response.message || \"Deleted successfully\",\n        status: 200\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message,\n        error: error.data,\n        status: error.status,\n        code: error.code,\n        isTimeout: error.isTimeout,\n        isNetworkError: error.isNetworkError,\n        data: null\n      };\n    }\n  }\n};\n\n// Only include endpoints that actually exist\nexport const apiMethods = {\n  // Auth\n  login: credentials => api.post(API_ENDPOINTS.LOGIN, credentials),\n  register: userData => api.post(API_ENDPOINTS.REGISTER, userData),\n  getProfile: () => api.get(API_ENDPOINTS.ME),\n  // Data\n  getFaculties: () => api.get(API_ENDPOINTS.FACULTIES),\n  getCourses: () => api.get(API_ENDPOINTS.COURSES),\n  getClasses: () => api.get(API_ENDPOINTS.CLASSES),\n  getMyClasses: () => api.get(API_ENDPOINTS.MY_CLASSES),\n  // Reports\n  getReports: (params = {}) => api.get(API_ENDPOINTS.REPORTS, params),\n  getReportStats: () => api.get(API_ENDPOINTS.REPORTS_STATS),\n  getReportById: id => api.get(API_ENDPOINTS.REPORTS_BY_ID(id)),\n  createReport: data => api.post(API_ENDPOINTS.REPORTS, data),\n  submitFeedback: (id, feedback) => api.post(API_ENDPOINTS.REPORTS_FEEDBACK(id), {\n    feedback\n  }),\n  // System\n  healthCheck: () => api.get(API_ENDPOINTS.HEALTH),\n  testConnection: () => api.get(API_ENDPOINTS.TEST)\n};\n\n// Enhanced backend connection test with detailed diagnostics\nexport const testBackendConnection = async () => {\n  console.group('🔍 Backend Connection Diagnostics');\n  try {\n    console.log('📡 Testing connection to:', API_BASE_URL);\n\n    // First, try a simple fetch to check if server is reachable\n    const startTime = Date.now();\n    const testResponse = await apiMethods.testConnection();\n    const endTime = Date.now();\n    console.log('✅ Backend connection successful:', {\n      responseTime: `${endTime - startTime}ms`,\n      status: testResponse.status,\n      data: testResponse.data\n    });\n    return {\n      connected: true,\n      responseTime: endTime - startTime,\n      status: testResponse.status,\n      message: 'Backend is responding correctly'\n    };\n  } catch (error) {\n    console.error('❌ Backend connection failed:', {\n      message: error.message,\n      status: error.status,\n      isTimeout: error.isTimeout,\n      isNetworkError: error.isNetworkError\n    });\n\n    // Additional diagnostic: try to ping the base URL\n    try {\n      const pingResponse = await fetch(API_BASE_URL, {\n        method: 'HEAD',\n        signal: AbortSignal.timeout(5000)\n      });\n      console.log('🌐 Server is reachable but API might be down. HTTP Status:', pingResponse.status);\n    } catch (pingError) {\n      console.error('💀 Server is completely unreachable:', pingError.message);\n    }\n    return {\n      connected: false,\n      message: error.message,\n      isTimeout: error.isTimeout,\n      isNetworkError: error.isNetworkError,\n      status: error.status\n    };\n  } finally {\n    console.groupEnd();\n  }\n};\n\n// Connection status monitor\nlet connectionStatus = 'unknown';\nexport const getConnectionStatus = () => connectionStatus;\n\n// Initialize connection test with retry\nexport const initializeApp = async () => {\n  console.log('🚀 Initializing application...');\n\n  // Wait a bit for backend to wake up (if it's sleeping)\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  const result = await testBackendConnection();\n  connectionStatus = result.connected ? 'connected' : 'disconnected';\n  if (!result.connected) {\n    console.warn('⚠️ Application starting in offline mode. Some features may not work.');\n\n    // Show user-friendly warning\n    if (typeof window !== 'undefined') {\n      setTimeout(() => {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = 'alert alert-warning alert-dismissible fade show';\n        alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';\n        alertDiv.innerHTML = `\n          <strong>⚠️ Connection Issue</strong>\n          <p class=\"mb-1\">Cannot connect to server: ${result.message}</p>\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        document.body.appendChild(alertDiv);\n      }, 1000);\n    }\n  }\n  return result;\n};\n\n// Export connection utilities\nexport const connectionUtils = {\n  testBackendConnection,\n  getConnectionStatus,\n  initializeApp\n};\n\n// Auto-initialize (but don't block app startup)\nsetTimeout(() => {\n  initializeApp();\n}, 1000);\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","API_ENDPOINTS","REGISTER","LOGIN","ME","FACULTIES","COURSES","CLASSES","MY_CLASSES","REPORTS","REPORTS_STATS","REPORTS_BY_ID","id","REPORTS_FEEDBACK","HEALTH","TEST","getAuthToken","localStorage","getItem","apiInstance","create","baseURL","timeout","timeoutErrorMessage","interceptors","request","use","config","_config$method","token","headers","Authorization","metadata","startTime","Date","console","log","method","toUpperCase","url","params","timestamp","toISOString","error","Promise","reject","response","_response$config$meth","endTime","duration","status","data","_error$config","_error$config$method","_error$config2","_error$response","_error$response2","_error$response3","message","code","warn","removeItem","setTimeout","window","location","href","apiCall","endpoint","options","retries","maxRetries","_config$method2","success","Error","_options$method","_error$response4","_error$response5","_error$response6","_error$response6$data","_error$response7","_error$response8","isTimeout","includes","isNetworkError","retriesLeft","delay","Math","pow","resolve","errorMessage","api","get","post","put","delete","apiMethods","login","credentials","register","userData","getProfile","getFaculties","getCourses","getClasses","getMyClasses","getReports","getReportStats","getReportById","createReport","submitFeedback","feedback","healthCheck","testConnection","testBackendConnection","group","now","testResponse","responseTime","connected","pingResponse","fetch","signal","AbortSignal","pingError","groupEnd","connectionStatus","getConnectionStatus","initializeApp","result","alertDiv","document","createElement","className","style","cssText","innerHTML","body","appendChild","connectionUtils"],"sources":["C:/Users/Wailer/Downloads/luct_reporting_app_/luct_reporting_app/frontend/src/utils/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Base API URL\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://luct-7.onrender.com\";\r\n\r\nexport const API_ENDPOINTS = {\r\n  // Auth\r\n  REGISTER: `${API_BASE_URL}/api/auth/register`,\r\n  LOGIN: `${API_BASE_URL}/api/auth/login`,\r\n  ME: `${API_BASE_URL}/api/auth/me`,\r\n\r\n  // Data\r\n  FACULTIES: `${API_BASE_URL}/api/faculties`,\r\n  COURSES: `${API_BASE_URL}/api/courses`,\r\n  CLASSES: `${API_BASE_URL}/api/classes`,\r\n  MY_CLASSES: `${API_BASE_URL}/api/my-classes`,\r\n\r\n  // Reports\r\n  REPORTS: `${API_BASE_URL}/api/reports`,\r\n  REPORTS_STATS: `${API_BASE_URL}/api/reports/stats`,\r\n  REPORTS_BY_ID: (id) => `${API_BASE_URL}/api/reports/${id}`,\r\n  REPORTS_FEEDBACK: (id) => `${API_BASE_URL}/api/reports/${id}/feedback`,\r\n\r\n  // Health\r\n  HEALTH: `${API_BASE_URL}/api/health`,\r\n  TEST: `${API_BASE_URL}/api/test`,\r\n};\r\n\r\n// Get token from localStorage\r\nexport const getAuthToken = () => {\r\n  return localStorage.getItem(\"token\");\r\n};\r\n\r\n// Enhanced API instance with better timeout and retry configuration\r\nconst apiInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000, // Reduced from 15000 to 10000ms\r\n  timeoutErrorMessage: \"Request timeout - backend server is not responding\",\r\n});\r\n\r\n// Request interceptor to add auth token\r\napiInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = getAuthToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    config.headers[\"Content-Type\"] = \"application/json\";\r\n    \r\n    // Add timestamp for debugging\r\n    config.metadata = { startTime: new Date() };\r\n    \r\n    console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${config.url}`, {\r\n      params: config.params,\r\n      timestamp: config.metadata.startTime.toISOString()\r\n    });\r\n    \r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"❌ Request interceptor error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napiInstance.interceptors.response.use(\r\n  (response) => {\r\n    const endTime = new Date();\r\n    const duration = endTime - response.config.metadata.startTime;\r\n    \r\n    console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, {\r\n      status: response.status,\r\n      duration: `${duration}ms`,\r\n      data: response.data\r\n    });\r\n    \r\n    return response;\r\n  },\r\n  (error) => {\r\n    const endTime = new Date();\r\n    const duration = error.config ? endTime - error.config.metadata.startTime : 'N/A';\r\n    \r\n    console.error(`💥 API Error: ${error.config?.method?.toUpperCase()} ${error.config?.url}`, {\r\n      status: error.response?.status,\r\n      duration: `${duration}ms`,\r\n      error: error.message,\r\n      code: error.code,\r\n      response: error.response?.data\r\n    });\r\n\r\n    if (error.response?.status === 401) {\r\n      console.warn(\"🔐 Authentication failed - redirecting to login\");\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"user\");\r\n      // Use setTimeout to avoid React state updates during render\r\n      setTimeout(() => {\r\n        window.location.href = \"/login\";\r\n      }, 100);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Enhanced API call wrapper with better error handling and retry logic\r\nexport const apiCall = async (endpoint, options = {}, retries = 3) => {\r\n  const maxRetries = retries;\r\n  \r\n  try {\r\n    const config = {\r\n      url: endpoint,\r\n      ...options,\r\n    };\r\n\r\n    console.log(`🔄 API Call attempt: ${config.method?.toUpperCase() || 'GET'} ${endpoint} (${maxRetries - retries + 1}/${maxRetries + 1})`);\r\n\r\n    const response = await apiInstance(config);\r\n    \r\n    // Handle backend response format\r\n    if (response.data && response.data.success === false) {\r\n      const error = new Error(response.data.message || \"Request failed\");\r\n      error.response = response;\r\n      throw error;\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    const isTimeout = error.code === 'ECONNABORTED' || error.message.includes('timeout');\r\n    const isNetworkError = error.message.includes('Network Error') || !error.response;\r\n    \r\n    console.error(`❌ API Call failed: ${options.method?.toUpperCase() || 'GET'} ${endpoint}`, {\r\n      error: error.message,\r\n      code: error.code,\r\n      status: error.response?.status,\r\n      isTimeout,\r\n      isNetworkError,\r\n      retriesLeft: retries\r\n    });\r\n\r\n    // Retry logic for timeout and network errors\r\n    if ((isTimeout || isNetworkError) && retries > 0) {\r\n      const delay = Math.pow(2, maxRetries - retries) * 1000; // Exponential backoff\r\n      console.log(`⏳ Retrying in ${delay}ms... (${retries} retries left)`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n      return apiCall(endpoint, options, retries - 1);\r\n    }\r\n    \r\n    // Enhanced error handling\r\n    if (error.response?.status === 401) {\r\n      // Already handled in interceptor\r\n    }\r\n    \r\n    // Return a consistent error format\r\n    const errorMessage = isTimeout \r\n      ? \"Backend server is not responding. Please check if the server is running.\"\r\n      : isNetworkError\r\n      ? \"Network connection failed. Please check your internet connection.\"\r\n      : error.response?.data?.message || error.message || \"API request failed\";\r\n    \r\n    throw {\r\n      success: false,\r\n      message: errorMessage,\r\n      status: error.response?.status,\r\n      code: error.code,\r\n      data: error.response?.data,\r\n      isTimeout,\r\n      isNetworkError\r\n    };\r\n  }\r\n};\r\n\r\n// Enhanced API methods with proper response handling\r\nexport const api = {\r\n  get: async (endpoint, params = {}) => {\r\n    try {\r\n      const response = await apiCall(endpoint, { \r\n        method: \"GET\",\r\n        params \r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        data: response.data || response,\r\n        message: response.message || \"Request successful\",\r\n        status: 200\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n        error: error.data,\r\n        status: error.status,\r\n        code: error.code,\r\n        isTimeout: error.isTimeout,\r\n        isNetworkError: error.isNetworkError,\r\n        data: null\r\n      };\r\n    }\r\n  },\r\n  \r\n  post: async (endpoint, data = {}) => {\r\n    try {\r\n      const response = await apiCall(endpoint, { \r\n        method: \"POST\", \r\n        data \r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        data: response.data || response,\r\n        message: response.message || \"Created successfully\",\r\n        status: 201\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n        error: error.data,\r\n        status: error.status,\r\n        code: error.code,\r\n        isTimeout: error.isTimeout,\r\n        isNetworkError: error.isNetworkError,\r\n        data: null\r\n      };\r\n    }\r\n  },\r\n  \r\n  put: async (endpoint, data = {}) => {\r\n    try {\r\n      const response = await apiCall(endpoint, { \r\n        method: \"PUT\", \r\n        data \r\n      });\r\n      return {\r\n        success: true,\r\n        data: response.data || response,\r\n        message: response.message || \"Updated successfully\",\r\n        status: 200\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n        error: error.data,\r\n        status: error.status,\r\n        code: error.code,\r\n        isTimeout: error.isTimeout,\r\n        isNetworkError: error.isNetworkError,\r\n        data: null\r\n      };\r\n    }\r\n  },\r\n  \r\n  delete: async (endpoint) => {\r\n    try {\r\n      const response = await apiCall(endpoint, { \r\n        method: \"DELETE\" \r\n      });\r\n      return {\r\n        success: true,\r\n        data: response.data || response,\r\n        message: response.message || \"Deleted successfully\",\r\n        status: 200\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n        error: error.data,\r\n        status: error.status,\r\n        code: error.code,\r\n        isTimeout: error.isTimeout,\r\n        isNetworkError: error.isNetworkError,\r\n        data: null\r\n      };\r\n    }\r\n  },\r\n};\r\n\r\n// Only include endpoints that actually exist\r\nexport const apiMethods = {\r\n  // Auth\r\n  login: (credentials) => api.post(API_ENDPOINTS.LOGIN, credentials),\r\n  register: (userData) => api.post(API_ENDPOINTS.REGISTER, userData),\r\n  getProfile: () => api.get(API_ENDPOINTS.ME),\r\n  \r\n  // Data\r\n  getFaculties: () => api.get(API_ENDPOINTS.FACULTIES),\r\n  getCourses: () => api.get(API_ENDPOINTS.COURSES),\r\n  getClasses: () => api.get(API_ENDPOINTS.CLASSES),\r\n  getMyClasses: () => api.get(API_ENDPOINTS.MY_CLASSES),\r\n  \r\n  // Reports\r\n  getReports: (params = {}) => api.get(API_ENDPOINTS.REPORTS, params),\r\n  getReportStats: () => api.get(API_ENDPOINTS.REPORTS_STATS),\r\n  getReportById: (id) => api.get(API_ENDPOINTS.REPORTS_BY_ID(id)),\r\n  createReport: (data) => api.post(API_ENDPOINTS.REPORTS, data),\r\n  submitFeedback: (id, feedback) => api.post(API_ENDPOINTS.REPORTS_FEEDBACK(id), { feedback }),\r\n  \r\n  // System\r\n  healthCheck: () => api.get(API_ENDPOINTS.HEALTH),\r\n  testConnection: () => api.get(API_ENDPOINTS.TEST),\r\n};\r\n\r\n// Enhanced backend connection test with detailed diagnostics\r\nexport const testBackendConnection = async () => {\r\n  console.group('🔍 Backend Connection Diagnostics');\r\n  \r\n  try {\r\n    console.log('📡 Testing connection to:', API_BASE_URL);\r\n    \r\n    // First, try a simple fetch to check if server is reachable\r\n    const startTime = Date.now();\r\n    const testResponse = await apiMethods.testConnection();\r\n    const endTime = Date.now();\r\n    \r\n    console.log('✅ Backend connection successful:', {\r\n      responseTime: `${endTime - startTime}ms`,\r\n      status: testResponse.status,\r\n      data: testResponse.data\r\n    });\r\n    \r\n    return {\r\n      connected: true,\r\n      responseTime: endTime - startTime,\r\n      status: testResponse.status,\r\n      message: 'Backend is responding correctly'\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Backend connection failed:', {\r\n      message: error.message,\r\n      status: error.status,\r\n      isTimeout: error.isTimeout,\r\n      isNetworkError: error.isNetworkError\r\n    });\r\n    \r\n    // Additional diagnostic: try to ping the base URL\r\n    try {\r\n      const pingResponse = await fetch(API_BASE_URL, { \r\n        method: 'HEAD',\r\n        signal: AbortSignal.timeout(5000)\r\n      });\r\n      console.log('🌐 Server is reachable but API might be down. HTTP Status:', pingResponse.status);\r\n    } catch (pingError) {\r\n      console.error('💀 Server is completely unreachable:', pingError.message);\r\n    }\r\n    \r\n    return {\r\n      connected: false,\r\n      message: error.message,\r\n      isTimeout: error.isTimeout,\r\n      isNetworkError: error.isNetworkError,\r\n      status: error.status\r\n    };\r\n  } finally {\r\n    console.groupEnd();\r\n  }\r\n};\r\n\r\n// Connection status monitor\r\nlet connectionStatus = 'unknown';\r\nexport const getConnectionStatus = () => connectionStatus;\r\n\r\n// Initialize connection test with retry\r\nexport const initializeApp = async () => {\r\n  console.log('🚀 Initializing application...');\r\n  \r\n  // Wait a bit for backend to wake up (if it's sleeping)\r\n  await new Promise(resolve => setTimeout(resolve, 2000));\r\n  \r\n  const result = await testBackendConnection();\r\n  connectionStatus = result.connected ? 'connected' : 'disconnected';\r\n  \r\n  if (!result.connected) {\r\n    console.warn('⚠️ Application starting in offline mode. Some features may not work.');\r\n    \r\n    // Show user-friendly warning\r\n    if (typeof window !== 'undefined') {\r\n      setTimeout(() => {\r\n        const alertDiv = document.createElement('div');\r\n        alertDiv.className = 'alert alert-warning alert-dismissible fade show';\r\n        alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';\r\n        alertDiv.innerHTML = `\r\n          <strong>⚠️ Connection Issue</strong>\r\n          <p class=\"mb-1\">Cannot connect to server: ${result.message}</p>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\r\n        `;\r\n        document.body.appendChild(alertDiv);\r\n      }, 1000);\r\n    }\r\n  }\r\n  \r\n  return result;\r\n};\r\n\r\n// Export connection utilities\r\nexport const connectionUtils = {\r\n  testBackendConnection,\r\n  getConnectionStatus,\r\n  initializeApp\r\n};\r\n\r\n// Auto-initialize (but don't block app startup)\r\nsetTimeout(() => {\r\n  initializeApp();\r\n}, 1000);\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}