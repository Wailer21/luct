{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nexport const exportToExcel = (data, filename = 'export', sheetName = 'Data') => {\n  try {\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(data);\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n\n    // Generate Excel file and save\n    const excelBuffer = XLSX.write(workbook, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const dataBlob = new Blob([excelBuffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    saveAs(dataBlob, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`);\n    return true;\n  } catch (error) {\n    console.error('Excel export error:', error);\n    return false;\n  }\n};\n\n// Specific export functions for different data types\nexport const exportReportsToExcel = reports => {\n  const exportData = reports.map(report => ({\n    'Report ID': report.id,\n    'Course Code': report.course_code,\n    'Course Name': report.course_name,\n    'Lecturer': report.lecturer_name,\n    'Week': report.week_of_reporting,\n    'Lecture Date': new Date(report.lecture_date).toLocaleDateString(),\n    'Students Present': report.actual_present,\n    'Total Registered': report.total_registered,\n    'Attendance Rate': `${Math.round(report.actual_present / report.total_registered * 100)}%`,\n    'Venue': report.venue || 'N/A',\n    'Topic': report.topic || 'N/A',\n    'Learning Outcomes': report.learning_outcomes || 'N/A',\n    'Recommendations': report.recommendations || 'N/A',\n    'Feedback': report.feedback || 'N/A',\n    'Created At': new Date(report.created_at).toLocaleString()\n  }));\n  return exportToExcel(exportData, 'lecture_reports', 'Reports');\n};\nexport const exportCoursesToExcel = courses => {\n  const exportData = courses.map(course => ({\n    'Course Code': course.code,\n    'Course Name': course.course_name,\n    'Faculty': course.faculty_name,\n    'Total Registered': course.total_registered,\n    'Total Reports': course.report_count || 0,\n    'Average Attendance': course.avg_attendance ? `${Math.round(course.avg_attendance)}%` : 'N/A'\n  }));\n  return exportToExcel(exportData, 'courses', 'Courses');\n};\nexport const exportStudentAttendanceToExcel = (attendance, studentName = '') => {\n  const exportData = attendance.map(record => ({\n    'Date': new Date(record.lecture_date).toLocaleDateString(),\n    'Course Code': record.course_code,\n    'Course Name': record.course_name,\n    'Lecturer': record.lecturer_name,\n    'Class': record.class_name,\n    'Week': record.week_of_reporting,\n    'Topic': record.topic || 'N/A',\n    'Status': record.actual_present > 0 ? 'Present' : 'Absent',\n    'Students Present': record.actual_present,\n    'Total Registered': record.total_registered,\n    'Attendance Rate': `${Math.round(record.actual_present / record.total_registered * 100)}%`\n  }));\n  const filename = studentName ? `attendance_${studentName}` : 'attendance';\n  return exportToExcel(exportData, filename, 'Attendance');\n};\nexport const exportAnalyticsToExcel = analyticsData => {\n  const exportData = [{\n    'Metric': 'Total Users',\n    'Value': analyticsData.total_users || 0\n  }, {\n    'Metric': 'Total Students',\n    'Value': analyticsData.total_students || 0\n  }, {\n    'Metric': 'Total Lecturers',\n    'Value': analyticsData.total_lecturers || 0\n  }, {\n    'Metric': 'Total Courses',\n    'Value': analyticsData.total_courses || 0\n  }, {\n    'Metric': 'Total Reports',\n    'Value': analyticsData.total_reports || 0\n  }, {\n    'Metric': 'Average Attendance Rate',\n    'Value': analyticsData.avg_attendance_rate ? `${analyticsData.avg_attendance_rate}%` : '0%'\n  }, {\n    'Metric': 'Average Rating',\n    'Value': analyticsData.avg_rating || 0\n  }];\n  return exportToExcel(exportData, 'analytics_report', 'Analytics');\n};\nexport const exportRatingsToExcel = (ratings, type = 'ratings') => {\n  const exportData = ratings.map(rating => ({\n    'Rated Item': rating.lecturer_name || rating.course_name,\n    'Type': rating.rating_type,\n    'Rating': rating.rating,\n    'Comment': rating.comment || 'N/A',\n    'Rated By': rating.student_name || 'N/A',\n    'Date': new Date(rating.created_at).toLocaleDateString()\n  }));\n  return exportToExcel(exportData, `${type}_ratings`, 'Ratings');\n};","map":{"version":3,"names":["XLSX","saveAs","exportToExcel","data","filename","sheetName","workbook","utils","book_new","worksheet","json_to_sheet","book_append_sheet","excelBuffer","write","bookType","type","dataBlob","Blob","Date","toISOString","split","error","console","exportReportsToExcel","reports","exportData","map","report","id","course_code","course_name","lecturer_name","week_of_reporting","lecture_date","toLocaleDateString","actual_present","total_registered","Math","round","venue","topic","learning_outcomes","recommendations","feedback","created_at","toLocaleString","exportCoursesToExcel","courses","course","code","faculty_name","report_count","avg_attendance","exportStudentAttendanceToExcel","attendance","studentName","record","class_name","exportAnalyticsToExcel","analyticsData","total_users","total_students","total_lecturers","total_courses","total_reports","avg_attendance_rate","avg_rating","exportRatingsToExcel","ratings","rating","rating_type","comment","student_name"],"sources":["C:/Users/Wailer/Downloads/luct_reporting_app_/luct_reporting_app/frontend/src/utils/excelExport.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport const exportToExcel = (data, filename = 'export', sheetName = 'Data') => {\r\n  try {\r\n    // Create workbook and worksheet\r\n    const workbook = XLSX.utils.book_new();\r\n    const worksheet = XLSX.utils.json_to_sheet(data);\r\n    \r\n    // Add worksheet to workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\r\n    \r\n    // Generate Excel file and save\r\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    const dataBlob = new Blob([excelBuffer], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    });\r\n    \r\n    saveAs(dataBlob, `${filename}_${new Date().toISOString().split('T')[0]}.xlsx`);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Excel export error:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Specific export functions for different data types\r\nexport const exportReportsToExcel = (reports) => {\r\n  const exportData = reports.map(report => ({\r\n    'Report ID': report.id,\r\n    'Course Code': report.course_code,\r\n    'Course Name': report.course_name,\r\n    'Lecturer': report.lecturer_name,\r\n    'Week': report.week_of_reporting,\r\n    'Lecture Date': new Date(report.lecture_date).toLocaleDateString(),\r\n    'Students Present': report.actual_present,\r\n    'Total Registered': report.total_registered,\r\n    'Attendance Rate': `${Math.round((report.actual_present / report.total_registered) * 100)}%`,\r\n    'Venue': report.venue || 'N/A',\r\n    'Topic': report.topic || 'N/A',\r\n    'Learning Outcomes': report.learning_outcomes || 'N/A',\r\n    'Recommendations': report.recommendations || 'N/A',\r\n    'Feedback': report.feedback || 'N/A',\r\n    'Created At': new Date(report.created_at).toLocaleString()\r\n  }));\r\n\r\n  return exportToExcel(exportData, 'lecture_reports', 'Reports');\r\n};\r\n\r\nexport const exportCoursesToExcel = (courses) => {\r\n  const exportData = courses.map(course => ({\r\n    'Course Code': course.code,\r\n    'Course Name': course.course_name,\r\n    'Faculty': course.faculty_name,\r\n    'Total Registered': course.total_registered,\r\n    'Total Reports': course.report_count || 0,\r\n    'Average Attendance': course.avg_attendance ? `${Math.round(course.avg_attendance)}%` : 'N/A'\r\n  }));\r\n\r\n  return exportToExcel(exportData, 'courses', 'Courses');\r\n};\r\n\r\nexport const exportStudentAttendanceToExcel = (attendance, studentName = '') => {\r\n  const exportData = attendance.map(record => ({\r\n    'Date': new Date(record.lecture_date).toLocaleDateString(),\r\n    'Course Code': record.course_code,\r\n    'Course Name': record.course_name,\r\n    'Lecturer': record.lecturer_name,\r\n    'Class': record.class_name,\r\n    'Week': record.week_of_reporting,\r\n    'Topic': record.topic || 'N/A',\r\n    'Status': record.actual_present > 0 ? 'Present' : 'Absent',\r\n    'Students Present': record.actual_present,\r\n    'Total Registered': record.total_registered,\r\n    'Attendance Rate': `${Math.round((record.actual_present / record.total_registered) * 100)}%`\r\n  }));\r\n\r\n  const filename = studentName ? `attendance_${studentName}` : 'attendance';\r\n  return exportToExcel(exportData, filename, 'Attendance');\r\n};\r\n\r\nexport const exportAnalyticsToExcel = (analyticsData) => {\r\n  const exportData = [\r\n    {\r\n      'Metric': 'Total Users',\r\n      'Value': analyticsData.total_users || 0\r\n    },\r\n    {\r\n      'Metric': 'Total Students',\r\n      'Value': analyticsData.total_students || 0\r\n    },\r\n    {\r\n      'Metric': 'Total Lecturers',\r\n      'Value': analyticsData.total_lecturers || 0\r\n    },\r\n    {\r\n      'Metric': 'Total Courses',\r\n      'Value': analyticsData.total_courses || 0\r\n    },\r\n    {\r\n      'Metric': 'Total Reports',\r\n      'Value': analyticsData.total_reports || 0\r\n    },\r\n    {\r\n      'Metric': 'Average Attendance Rate',\r\n      'Value': analyticsData.avg_attendance_rate ? `${analyticsData.avg_attendance_rate}%` : '0%'\r\n    },\r\n    {\r\n      'Metric': 'Average Rating',\r\n      'Value': analyticsData.avg_rating || 0\r\n    }\r\n  ];\r\n\r\n  return exportToExcel(exportData, 'analytics_report', 'Analytics');\r\n};\r\n\r\nexport const exportRatingsToExcel = (ratings, type = 'ratings') => {\r\n  const exportData = ratings.map(rating => ({\r\n    'Rated Item': rating.lecturer_name || rating.course_name,\r\n    'Type': rating.rating_type,\r\n    'Rating': rating.rating,\r\n    'Comment': rating.comment || 'N/A',\r\n    'Rated By': rating.student_name || 'N/A',\r\n    'Date': new Date(rating.created_at).toLocaleDateString()\r\n  }));\r\n\r\n  return exportToExcel(exportData, `${type}_ratings`, 'Ratings');\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}